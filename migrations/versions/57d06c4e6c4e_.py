"""empty message

Revision ID: 57d06c4e6c4e
Revises: f8dcf85b68cb
Create Date: 2025-09-28 14:55:09.844153

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '57d06c4e6c4e'
down_revision = 'f8dcf85b68cb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.drop_column('message')

    bind = op.get_bind()
    if bind.dialect.name == "sqlite":
        # SQLite: recreate table om de CHECK aan te passen
        with op.batch_alter_table("motie_share", recreate="always") as batch_op:
            # probeer oude check te verwijderen (in SQLite vaak naamloos; ignoreer errors)
            try:
                batch_op.drop_constraint("ck_motieshare_permission", type_="check")
            except Exception:
                pass
            batch_op.create_check_constraint(
                "ck_motieshare_permission",
                "permission IN ('view','comment','suggest','edit')"
            )
    else:
    # Postgres/MySQL: gewone drop + create
        op.drop_constraint("ck_motieshare_permission", "motie_share", type_="check")
        op.create_check_constraint(
            "ck_motieshare_permission",
            "motie_share",
            "permission IN ('view','comment','suggest','edit')"
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('notification', schema=None) as batch_op:
        batch_op.add_column(sa.Column('message', sa.VARCHAR(length=120), nullable=True))

    # ### end Alembic commands ###
        bind = op.get_bind()
    if bind.dialect.name == "sqlite":
        with op.batch_alter_table("motie_share", recreate="always") as batch_op:
            try:
                batch_op.drop_constraint("ck_motieshare_permission", type_="check")
            except Exception:
                pass
            batch_op.create_check_constraint(
                "ck_motieshare_permission",
                "permission IN ('view','comment','suggest')"
            )
    else:
        op.drop_constraint("ck_motieshare_permission", "motie_share", type_="check")
        op.create_check_constraint(
            "ck_motieshare_permission",
            "motie_share",
            "permission IN ('view','comment','suggest')"
        )